require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EncodesController, type: :controller do
  login_user

  before(:all) do
    @user = FactoryBot.create(:user)
  end

  let(:valid_attributes) {
    {title: "hello", user: @user, file: FactoryHelpers.upload_file('spec/factories/sample.mp4', 'video/mp4', true)}
  }

  let(:invalid_attributes) {
    {title: "", user: @user, file: FactoryHelpers.upload_file('spec/factories/sample.mp4', 'video/mp4', true)}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EncodesController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      Encode.create! valid_attributes
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      encode = Encode.create! valid_attributes
      get :show, params: {id: encode.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Encode" do
        expect {
          post :create, params: {encode: valid_attributes}
        }.to change(Encode, :count).by(1)
      end

      it "redirects to the created encode" do
        post :create, params: {encode: valid_attributes}
        expect(response).to redirect_to(Encode.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {encode: invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

end
